import * as React from "react";
export declare type SplitValueFunction<V> = (v: V) => any;
export declare type ContextHookFunction<V> = () => V;
export declare type ContextHookObject<P, V> = {
    Context: React.Context<V>;
    Provider: React.FunctionComponent<P>;
};
export declare type ContextHookTuple<P, V> = [React.FunctionComponent<P>, ContextHookFunction<V>];
export declare type ContextHookMultipleTuple<P, S extends Array<SplitValueFunction<any>>> = [React.FunctionComponent<P>, S[0] extends (...args: any[]) => infer U ? ContextHookFunction<U> : never, S[1] extends (...args: any[]) => infer U ? ContextHookFunction<U> : never, S[2] extends (...args: any[]) => infer U ? ContextHookFunction<U> : never, S[3] extends (...args: any[]) => infer U ? ContextHookFunction<U> : never, S[4] extends (...args: any[]) => infer U ? ContextHookFunction<U> : never, S[5] extends (...args: any[]) => infer U ? ContextHookFunction<U> : never, S[6] extends (...args: any[]) => infer U ? ContextHookFunction<U> : never, S[7] extends (...args: any[]) => infer U ? ContextHookFunction<U> : never, S[8] extends (...args: any[]) => infer U ? ContextHookFunction<U> : never];
export declare type ContextHookReturn<P, V, S extends Array<SplitValueFunction<V>>> = ContextHookFunction<V> & ContextHookObject<P, V> & (S["length"] extends 0 ? ContextHookTuple<P, V> : ContextHookMultipleTuple<P, S>);
